table> tr > td tags

for rows we use colspan=""
for col we use rowspan=""

import java.util.*;

public class Solution {

    public static int maxAbsoluteDifference(int[] arr) {
        int n = arr.length;
        int[] leftSmaller = new int[n];
        int[] rightSmaller = new int[n];
        
        // Finding the nearest left smaller elements
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && stack.peek() >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                leftSmaller[i] = stack.peek();
            } else {
                leftSmaller[i] = 0;
            }
            stack.push(arr[i]);
        }

        // Clear the stack for reuse
        stack.clear();

        // Finding the nearest right smaller elements
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && stack.peek() >= arr[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                rightSmaller[i] = stack.peek();
            } else {
                rightSmaller[i] = 0;
            }
            stack.push(arr[i]);
        }

        // Calculate the maximum absolute difference
        int maxDifference = 0;
        for (int i = 0; i < n; i++) {
            int difference = Math.abs(leftSmaller[i] - rightSmaller[i]);
            maxDifference = Math.max(maxDifference, difference);
        }

        return maxDifference;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int T = scanner.nextInt();
        for (int t = 0; t < T; t++) {
            int N = scanner.nextInt();
            int[] arr = new int[N];
            for (int i = 0; i < N; i++) {
                arr[i] = scanner.nextInt();
            }
            System.out.println(maxAbsoluteDifference(arr));
        }
        scanner.close();
    }
}

submit to confirm
reset to clear